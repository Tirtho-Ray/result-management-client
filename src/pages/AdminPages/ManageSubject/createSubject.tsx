import React, { useState, useEffect } from 'react';
import { CreateSubject, SubjectApiResponse } from '../../../types/types';
import api from '../../../Api/Api';
import createSubject from '../../../Api/manageSubject/createSubject';

interface CreateSubjectFormProps {
  onSubmit: (subject: CreateSubject) => void;
}

const CreateSubjectForm: React.FC<CreateSubjectFormProps> = ({ onSubmit }) => {
  const [formData, setFormData] = useState<CreateSubject>({
    name: '',
    subCode: 0,  // Leave as 0 if it's generated by the backend
    credit: 0,
    mark: 0,
    semesterId: '', // Keep as string (ID) rather than object
    departmentId: '', // Keep as string (ID) rather than object
  });

  const [departments, setDepartments] = useState<{ _id: string; name: string }[]>([]);
  const [semesters, setSemesters] = useState<{ _id: string; name: string }[]>([]);
  const [loading, setLoading] = useState<boolean>(false);

  // Fetch departments from the API
  useEffect(() => {
    const fetchDepartments = async () => {
      try {
        const response = await api.get<SubjectApiResponse>('/api/departments');
        if (response.data.success) {
          setDepartments(response.data.data);
        } else {
          console.error('Failed to fetch departments');
        }
      } catch (error) {
        console.error('Error fetching departments:', error);
      }
    };

    fetchDepartments();
  }, []);

  // Fetch semesters from the API
  useEffect(() => {
    const fetchSemesters = async () => {
      try {
        const response = await api.get<SubjectApiResponse>('/api/semesters');
        if (response.data.success) {
          setSemesters(response.data.data);
        } else {
          console.error('Failed to fetch semesters');
        }
      } catch (error) {
        console.error('Error fetching semesters:', error);
      }
    };

    fetchSemesters();
  }, []);

  // Handle input changes for the form fields
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData((prevState) => ({
      ...prevState,
      [name]: name === 'subCode' || name === 'credit' || name === 'mark' ? +value : value,
    }));
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    try {
      const response = await createSubject(formData);
      if (response.success) {
        // console.log('Subject created successfully:', response.data);
        // Optionally, you can call the onSubmit function to notify the parent
        onSubmit(formData);
      } else {
        console.error('Failed to create subject:', response.message);
      }
    } catch (error) {
      console.error('Error creating subject:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <div className="mb-4">
        <label className="block text-sm font-medium">Subject Name</label>
        <input
          type="text"
          name="name"
          value={formData.name}
          onChange={handleChange}
          className="w-full px-4 py-2 border rounded-lg"
        />
      </div>

      <div className="mb-4">
        <label className="block text-sm font-medium">Subject Code</label>
        {/* Normally, you should not have this input if subCode is generated by the backend */}
        <input
          type=""
          name="subCode"
          value={formData.subCode}
          onChange={handleChange}
          className="w-full px-4 py-2 border rounded-lg"
        />
      </div>

      <div className="mb-4">
        <label className="block text-sm font-medium">Credit</label>
        <input
          type=""
          name="credit"
          value={formData.credit}
          onChange={handleChange}
          className="w-full px-4 py-2 border rounded-lg"
        />
      </div>

      <div className="mb-4">
        <label className="block text-sm font-medium">Mark</label>
        <input
          type=""
          name="mark"
          value={formData.mark}
          onChange={handleChange}
          className="w-full px-4 py-2 border rounded-lg"
        />
      </div>

      {/* Department Select */}
      <div className="mb-4">
        <label className="block text-sm font-medium">Department</label>
        <select
          name="departmentId"
          value={formData.departmentId}
          onChange={handleChange}
          className="w-full px-4 py-2 border rounded-lg"
        >
          <option value="">Select Department</option>
          {departments.map((department) => (
            <option key={department._id} value={department._id}>
              {department.name}
            </option>
          ))}
        </select>
      </div>

      {/* Semester Select */}
      <div className="mb-4">
        <label className="block text-sm font-medium">Semester</label>
        <select
          name="semesterId"
          value={formData.semesterId}
          onChange={handleChange}
          className="w-full px-4 py-2 border rounded-lg"
        >
          <option value="">Select Semester</option>
          {semesters.map((semester) => (
            <option key={semester._id} value={semester._id}>
              {semester.name}
            </option>
          ))}
        </select>
      </div>

      <button
        type="submit"
        className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600"
        disabled={loading} // Disable the button while loading
      >
        {loading ? 'Submitting...' : 'Submit'}
      </button>
    </form>
  );
};

export default CreateSubjectForm;
